public class VTBClientQuestionnareScripts : EntityScriptModule<IVTBClientQuestionnare>
{
    // Fields
    private const bool NEEDPDFFORMAT = false;
    private readonly ICountry COUNTRY_KAZAKHSTAN;

    // Methods
    public VTBClientQuestionnareScripts()
    {
        ParameterExpression expression;
        this.COUNTRY_KAZAKHSTAN = EntityManager<ICountry>.get_Instance().Find(Expression.Lambda<Func<ICountry, bool>>(Expression.Equal(Expression.Property(expression = Expression.Parameter(typeof(ICountry), "c"), (MethodInfo) methodof(ICountry.get_Code)), Expression.Constant("398", typeof(string)), false, (MethodInfo) methodof(string.op_Equality)), new ParameterExpression[] { expression })).FirstOrDefault<ICountry>();
    }

    private bool CheckAmongQuestionnaires(IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        return EntityManager<IVTBClientQuestionnare>.get_Instance().Find(Expression.Lambda<Func<IVTBClientQuestionnare, bool>>(Expression.AndAlso(Expression.AndAlso(Expression.Equal(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "e"), (MethodInfo) methodof(IVTBClientQuestionnare.get_IIN)), Expression.Property(Expression.Constant(entity), (MethodInfo) methodof(IVTBClientQuestionnare.get_IIN)), false, (MethodInfo) methodof(string.op_Equality)), Expression.NotEqual(Expression.Property(expression, (MethodInfo) methodof(IVTBClientQuestionnare.get_QuestionnareFileSigned)), Expression.Constant(null, typeof(object)))), Expression.NotEqual(Expression.Property(Expression.Property(expression, (MethodInfo) methodof(IVTBClientQuestionnare.get_QuestionnareFileSigned)), (MethodInfo) methodof(IAttachment.get_File)), Expression.Constant(null, typeof(object)))), new ParameterExpression[] { expression })).Any<IVTBClientQuestionnare>(e => ((e.get_QuestionnareFileSigned().get_File().get_Name() == entity.get_QuestionnareFileSigned().get_File().get_Name()) && (e.get_QuestionnareFileSigned().get_File().GetSize() == entity.get_QuestionnareFileSigned().get_File().GetSize())));
    }

    private bool CheckAmongQuestionnairesBusiness(IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        return EntityManager<IVTBClientQuestionnareBusiness>.get_Instance().Find(Expression.Lambda<Func<IVTBClientQuestionnareBusiness, bool>>(Expression.AndAlso(Expression.AndAlso(Expression.Equal(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnareBusiness), "e"), (MethodInfo) methodof(IVTBClientQuestionnareBusiness.get_IIN)), Expression.Property(Expression.Constant(entity), (MethodInfo) methodof(IVTBClientQuestionnare.get_IIN)), false, (MethodInfo) methodof(string.op_Equality)), Expression.NotEqual(Expression.Property(expression, (MethodInfo) methodof(IVTBClientQuestionnareBusiness.get_QuestionnareFileSigned)), Expression.Constant(null, typeof(object)))), Expression.NotEqual(Expression.Property(Expression.Property(expression, (MethodInfo) methodof(IVTBClientQuestionnareBusiness.get_QuestionnareFileSigned)), (MethodInfo) methodof(IAttachment.get_File)), Expression.Constant(null, typeof(object)))), new ParameterExpression[] { expression })).Any<IVTBClientQuestionnareBusiness>(e => ((e.get_QuestionnareFileSigned().get_File().get_Name() == entity.get_QuestionnareFileSigned().get_File().get_Name()) && (e.get_QuestionnareFileSigned().get_File().GetSize() == entity.get_QuestionnareFileSigned().get_File().GetSize())));
    }

    private void CheckFile(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        form.For<IAttachment>(Expression.Lambda<Func<IVTBClientQuestionnare, IAttachment>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "e"), (MethodInfo) methodof(IVTBClientQuestionnare.get_QuestionnareFileSigned)), new ParameterExpression[] { expression })).get_Validation().Ok();
        if (this.FileFormatNotSuitableIn(entity.get_QuestionnareFileSigned()))
        {
            form.For<IAttachment>(Expression.Lambda<Func<IVTBClientQuestionnare, IAttachment>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "e"), (MethodInfo) methodof(IVTBClientQuestionnare.get_QuestionnareFileSigned)), new ParameterExpression[] { expression })).get_Validation().Error("Допускаемый формат файла pdf, png, jpg");
        }
        if (this.FileBeenAttachedBefore(entity))
        {
            form.For<IAttachment>(Expression.Lambda<Func<IVTBClientQuestionnare, IAttachment>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "e"), (MethodInfo) methodof(IVTBClientQuestionnare.get_QuestionnareFileSigned)), new ParameterExpression[] { expression })).get_Validation().Error("Нельзя вкладывать один и тот же скан в разные анкеты!");
        }
    }

    private void CreateClientQuestionnareDoc(IVTBClientQuestionnare entity, string clientTypeString)
    {
        IFolder folder = EntityManager<IBASGeneralSettings>.get_Instance().Find("Name LIKE '%Анкета-вопросник%'").First<IBASGeneralSettings>().get_Folder();
        BinaryFile file = this.GenerateClientQuestionnareFile(entity, clientTypeString);
        IFile file2 = InterfaceActivator.Create<IFile>();
        file2.set_Folder(folder.get_Folder());
        IDocumentVersion version = InterfaceActivator.Create<IDocumentVersion>();
        version.set_Document(file2);
        file2.get_Versions().Add(version);
        version.set_Status(2);
        version.set_File(file);
        file2.set_Name(entity.get_QuestionnareName());
        IUser user = EntityManager<IOrganizationItem>.get_Instance().Find("Name LIKE '%Системный пользователь%'").First<IOrganizationItem>().get_User();
        file2.set_CreationAuthor(user);
        file2.Save();
    }

    private void CreateOrUpdateClientQuestionnare(IVTBClientQuestionnare entity)
    {
        this.SetHiddenProperties(entity);
        string clientTypeString = (entity.get_ContractorIndividual() != null) ? "физ лицо" : "юр лицо";
        IFile doc = EntityManager<IFile>.get_Instance().Find($"Name LIKE '%{entity.get_QuestionnareName()}%' AND (IsArchived IS EMPTY OR IsArchived = FALSE)").FirstOrDefault<IFile>();
        if ((entity.get_QuestionnareFile() == null) && (doc == null))
        {
            this.CreateClientQuestionnareDoc(entity, clientTypeString);
        }
        else
        {
            this.UpdateClientQuestionnareDoc(entity, clientTypeString, doc);
        }
    }

    private bool FileBeenAttachedBefore(IVTBClientQuestionnare entity)
    {
        bool flag = false;
        if ((entity.get_QuestionnareFileSigned() != null) && (entity.get_QuestionnareFileSigned().get_File() != null))
        {
            flag = this.CheckAmongQuestionnaires(entity) || this.CheckAmongQuestionnairesBusiness(entity);
        }
        return flag;
    }

    private bool FileFormatNotSuitableIn(IAttachment attachment)
    {
        Func<string, bool> predicate = null;
        bool flag = false;
        if ((attachment == null) || (attachment.get_File() == null))
        {
            return flag;
        }
        string[] source = new string[] { ".pdf", ".png", ".jpg" };
        if (predicate == null)
        {
            predicate = x => x.Equals(attachment.get_File().get_Extension());
        }
        return !source.Any<string>(predicate);
    }

    private BinaryFile GenerateClientQuestionnareFile(IVTBClientQuestionnare entity, string clientTypeString)
    {
        IFolder folder = EntityManager<IBASGeneralSettings>.get_Instance().Find("Name LIKE '%Анкета-вопросник%'").First<IBASGeneralSettings>().get_Folder();
        BinaryFile fileByDocumentId = Locator.GetServiceNotNull<IDocumentFileManager>().GetFileByDocumentId(EntityManager<IFile>.get_Instance().Find($"Name LIKE '%{clientTypeString}%' AND Folder = {folder.get_Id()}").First<IFile>().get_Id());
        BinaryFile file2 = Locator.GetServiceNotNull<ITemplateFileManager>().CreateFromTemplate(fileByDocumentId.get_Id());
        Locator.GetServiceNotNull<DocumentGeneratorManager>().Create(file2.get_ContentFilePath(), null).Generate(entity);
        Locator.GetServiceNotNull<IFileManager>().SaveFile(file2);
        Document document = new Document(file2.get_ContentFilePath());
        string sourceFileName = file2.get_ContentFilePath();
        document.Save(sourceFileName);
        BinaryFile file3 = InterfaceActivator.Create<BinaryFile>();
        file3.set_Name(entity.get_QuestionnareName() + ".docx");
        file3.set_CreateDate(DateTime.Now);
        file3.InitializeContentFilePath();
        File.Copy(sourceFileName, file3.get_ContentFilePath());
        Locator.GetServiceNotNull<IFileManager>().SaveFile(file3);
        entity.set_QuestionnareFile(InterfaceActivator.Create<IAttachment>());
        entity.get_QuestionnareFile().set_File(file3);
        return file3;
    }

    private ISaleConfigExt GetSaleFrom(string questionnaireName)
    {
        ISaleConfigExt ext = null;
        string s = questionnaireName.Split(new char[] { ' ' }).FirstOrDefault<string>();
        if ((s != null) && long.TryParse(s, out long num))
        {
            ext = EntityManager<ISaleConfigExt>.get_Instance().Find($"Id = {num}").FirstOrDefault<ISaleConfigExt>();
        }
        return ext;
    }

    public virtual void OnChangeConductOnBehalfForeigner(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        this.SetVisibilityForeignerInfo(form, entity);
    }

    public virtual void OnChangeContractorIndividualOrContractorLegal(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        if ((entity.get_ContractorIndividual() != null) && (entity.get_ContractorLegal() != null))
        {
            form.For<IContractorLegal>(Expression.Lambda<Func<IVTBClientQuestionnare, IContractorLegal>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ContractorLegal)), new ParameterExpression[] { expression })).get_Validation().Error("Должно быть заполнено либо Физическое лицо, либо Юридическое лицо.");
            form.For<IContractorIndividual>(Expression.Lambda<Func<IVTBClientQuestionnare, IContractorIndividual>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ContractorIndividual)), new ParameterExpression[] { expression })).get_Validation().Error("Должно быть заполнено либо Физическое лицо, либо Юридическое лицо.");
        }
        else
        {
            form.For<IContractorLegal>(Expression.Lambda<Func<IVTBClientQuestionnare, IContractorLegal>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ContractorLegal)), new ParameterExpression[] { expression })).get_Validation().Ok();
            form.For<IContractorIndividual>(Expression.Lambda<Func<IVTBClientQuestionnare, IContractorIndividual>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ContractorIndividual)), new ParameterExpression[] { expression })).get_Validation().Ok();
            this.SetItemsVisibilityActivityPanel(form, entity);
        }
    }

    public virtual void OnChangeDesiredBankServices(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_DesiredBankServicesOthers(null);
        this.SetVisibilityDesiredBankServicesOthers(form, entity);
    }

    public virtual void OnChangeGovPositions(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_GovernmentPositionsOthers(null);
        this.SetVisibilityGovPositionOthers(form, entity);
    }

    public virtual void OnChangeGroupIncome(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        if (entity.get_GroupIncome() != null)
        {
            IVTBKZTranslater translater = EntityManager<IVTBKZTranslater>.get_Instance().Find($"Name = '{entity.get_GroupIncome().get_Value()}'").FirstOrDefault<IVTBKZTranslater>();
            entity.set_GroupIncomeKaz((translater != null) ? translater.get_NameKaz() : entity.get_GroupIncome().get_Value());
        }
    }

    public virtual void OnChangeHadGovernmentPosition(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_GovernmentPositions(null);
        entity.set_GovernmentPositionsOthers(null);
        this.SetVisibilityGovPosition(form, entity);
    }

    public virtual void OnChangeHasForeignBankAccount(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_ForeignBankAccountCountry(null);
        this.SetVisibilityForeignAccountCountry(form, entity);
    }

    public virtual void OnChangeHasLicence(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        entity.set_LicenseBlock(null);
        bool flag = entity.get_HasLicense();
        form.For<ISet<IVTBClientQuestionnare_LicenseBlock>>(Expression.Lambda<Func<IVTBClientQuestionnare, ISet<IVTBClientQuestionnare_LicenseBlock>>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_LicenseBlock)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    public virtual void OnChangeHasRelativeWithGovPosition(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_HasIntentionConductOnBehalfGovRelatives(false);
        entity.set_RelativeWithGovPositionBlock(null);
        this.SetVisibilityRelativesWithGovPositions(form, entity);
    }

    public virtual void OnChangeIsAddressSame(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_FactAddress(null);
        this.SetItemsVisibilityPersonalInformation(form, entity);
    }

    public virtual void OnChangeIsForeignStructureProtector(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        this.SetVisibilityForeignStructureInfo(form, entity);
    }

    public virtual void OnChangeIsGroupParticipant(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_GroupItemsName(string.Empty);
        entity.set_GroupIncome(null);
        entity.set_GroupItemsBlock(null);
        this.SetVisibilityGroupItems(form, entity);
    }

    public virtual void OnChangeLivingPlaceAttachment(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_LivingPlaceFileNamesList(string.Empty);
        StringBuilder builder = new StringBuilder();
        foreach (IAttachment attachment in entity.get_LivingPlaceAttachment())
        {
            builder.Append(attachment.get_File().get_Name() + "; ");
        }
        entity.set_LivingPlaceFileNamesList(builder.ToString());
    }

    public virtual void OnChangeOperationsFrequency(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        if (entity.get_OperationsFrequency() != null)
        {
            IVTBKZTranslater translater = EntityManager<IVTBKZTranslater>.get_Instance().Find($"Name = '{entity.get_OperationsFrequency().get_Value()}'").FirstOrDefault<IVTBKZTranslater>();
            entity.set_OperationFrequencyKaz((translater != null) ? translater.get_NameKaz() : entity.get_OperationsFrequency().get_Value());
        }
    }

    public virtual void OnChangeQuestionnareFileSigned(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        this.CheckFile(form, entity);
        this.SetWarningQFileSignedAttachValue(entity);
    }

    public virtual void OnChangeRelativePosition(IVTBClientQuestionnare entity, IVTBClientQuestionnare_RelativeWithGovPositionBlock item, FormViewBuilder<IVTBClientQuestionnare_RelativeWithGovPositionBlock> form)
    {
        item.set_RelativePositionOthers(string.Empty);
        this.SetVisibilityRelativePositionOthers(item, form);
    }

    public virtual void OnChangeResidentCard(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_ResidentCardSeries(null);
        entity.set_ResidentCardNumber(null);
        entity.set_ResidentCardIssuedBy(null);
        DateTime? nullable = null;
        entity.set_ResidentCardIssueDate(nullable);
        entity.set_ResidentCardValidUntil(null);
        this.SetVisibilityResidentCardFields(form, entity);
    }

    public virtual void OnClickCreateClientQuestionnare(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        entity.set_ErrorMsg(this.ReturnErrorMsgIfCompletionCheckFailed(entity));
        if (string.IsNullOrEmpty(entity.get_ErrorMsg()))
        {
            this.CreateOrUpdateClientQuestionnare(entity);
            this.SetVisibilityQuestionnareFile(form, entity, true);
        }
    }

    public virtual void OnLoadFormCreateOrEdit(IVTBClientQuestionnare entity, FormViewBuilder<IVTBClientQuestionnare> form)
    {
        ParameterExpression expression;
        this.SetWarningQFileSignedAttachValue(entity);
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_NeedSaveEntity)), new ParameterExpression[] { expression })).Visible(false);
        this.UpdateEntityInformation(entity);
        this.SetItemsVisibilityPersonalInformation(form, entity);
        this.SetItemsVisibilityActivityPanel(form, entity);
        this.SetItemsVisibilityBankSector(form, entity);
        this.SetVisibilityContractors(form, entity);
        this.SetIssueDate(entity);
        this.SetDateUntil(entity);
        this.SetFilters(entity);
        this.SetVisibilityQuestionnareFile(form, entity, false);
    }

    public virtual void OnLoadLicenseBlock(IVTBClientQuestionnare entity, IVTBClientQuestionnare_LicenseBlock item, FormViewBuilder<IVTBClientQuestionnare_LicenseBlock> form)
    {
        ParameterExpression expression;
        DateTimeSettings settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare_LicenseBlock, DateTime?>(item, Expression.Lambda<Func<IVTBClientQuestionnare_LicenseBlock, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare_LicenseBlock), "i"), (MethodInfo) methodof(IVTBClientQuestionnare_LicenseBlock.get_LicenseIssueDate)), new ParameterExpression[] { expression }));
        settingsFor.set_MaxDateValue(new DateTime?(DateTime.Now));
        settingsFor.Save();
        settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare_LicenseBlock, DateTime?>(item, Expression.Lambda<Func<IVTBClientQuestionnare_LicenseBlock, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare_LicenseBlock), "i"), (MethodInfo) methodof(IVTBClientQuestionnare_LicenseBlock.get_LicenseValidUntil)), new ParameterExpression[] { expression }));
        settingsFor.set_MinDateValue(new DateTime?(DateTime.Now.AddDays(1.0)));
        settingsFor.Save();
    }

    public virtual void OnLoadRelativeWithGovPositionBlock(IVTBClientQuestionnare entity, IVTBClientQuestionnare_RelativeWithGovPositionBlock item, FormViewBuilder<IVTBClientQuestionnare_RelativeWithGovPositionBlock> form)
    {
        this.SetVisibilityRelativePositionOthers(item, form);
    }

    private string ReturnErrorMsgIfCompletionCheckFailed(IVTBClientQuestionnare entity)
    {
        StringBuilder builder = new StringBuilder();
        if (string.IsNullOrEmpty(entity.get_LastName()))
        {
            builder.AppendLine("- Фамилия (в карточке физ. лица)");
        }
        if (string.IsNullOrEmpty(entity.get_FirstName()))
        {
            builder.AppendLine("- Имя (в карточке физ. лица)");
        }
        if (!entity.get_BirthDate().HasValue)
        {
            builder.AppendLine("- Дата рождения (в карточке физ. лица)");
        }
        if (string.IsNullOrEmpty(entity.get_BirthPlace()))
        {
            builder.AppendLine("- Место рождения");
        }
        if (entity.get_Citizenship().Count == 0)
        {
            builder.AppendLine("- Гражданство (в карточке физ. лица)");
        }
        if (entity.get_Residence().Count == 0)
        {
            builder.AppendLine("- Резидентство (в карточке физ. лица)");
        }
        if (entity.get_IdentityDoc() == null)
        {
            builder.AppendLine("- Документ, удостоверяющий личность (в карточке физ. лица)");
        }
        if (string.IsNullOrEmpty(entity.get_IdentityDocNumber()))
        {
            builder.AppendLine("- Номер документа (удост. личности, в карточке физ. лица)");
        }
        if (string.IsNullOrEmpty(entity.get_IdentityDocIssuedBy()))
        {
            builder.AppendLine("- Кем выдан (удост. личности, в карточке физ. лица)");
        }
        if (!entity.get_IdentityDocIssueDate().HasValue)
        {
            builder.AppendLine("- Дата выдачи (удост. личности, в карточке физ. лица)");
        }
        if (!entity.get_IdentityDocValidUntil().HasValue)
        {
            builder.AppendLine("- Действует до (удост. личности, в карточке физ. лица)");
        }
        if (entity.get_ResidentCard() != null)
        {
            if (string.IsNullOrEmpty(entity.get_ResidentCardNumber()))
            {
                builder.AppendLine("- Номер документа (ВНЖ в РК, в карточке физ. лица)");
            }
            if (string.IsNullOrEmpty(entity.get_ResidentCardIssuedBy()))
            {
                builder.AppendLine("- Кем выдан (ВНЖ в РК, в карточке физ. лица)");
            }
            if (!entity.get_ResidentCardIssueDate().HasValue)
            {
                builder.AppendLine("- Дата выдачи (ВНЖ в РК, в карточке физ. лица)");
            }
            if (string.IsNullOrEmpty(entity.get_ResidentCardIssuedBy()))
            {
                builder.AppendLine("- Действует до (ВНЖ в РК, в карточке физ. лица)");
            }
        }
        if (string.IsNullOrEmpty(entity.get_IIN()))
        {
            builder.AppendLine("- ИИН (в карточке физ. либо юр. лица)");
        }
        if (entity.get_LegalAddress() == null)
        {
            builder.AppendLine("- Адрес места регистрации (в карточке физ. лица)");
        }
        if (!(entity.get_IsAddressSame() || (entity.get_FactAddress() != null)))
        {
            builder.AppendLine("- Адрес места проживания (в карточке физ. лица)");
        }
        if (string.IsNullOrEmpty(entity.get_ContactDataCellPhone()))
        {
            builder.AppendLine("- Мобильный телефон (в карточке физ. лица)");
        }
        if (string.IsNullOrEmpty(entity.get_ContactDataAddress()))
        {
            builder.AppendLine("- Адрес почты до востребования");
        }
        if (entity.get_ContractorLegal() != null)
        {
            if (string.IsNullOrEmpty(entity.get_CompanyName()))
            {
                builder.AppendLine("- Наименование индивидуального предпринимателя (в карточке юр. лица)");
            }
            if (entity.get_BusActivityType() == null)
            {
                builder.AppendLine("- Вид предпринимательской деятельности (в карточке юр. лица)");
            }
            if (!entity.get_Income().HasValue)
            {
                builder.AppendLine("- Среднегодовой доход");
            }
            if (!entity.get_EmployeesQuantity().HasValue)
            {
                builder.AppendLine("- Среднегодовая численность работников");
            }
            if (string.IsNullOrEmpty(entity.get_ConfirmRegDoc()))
            {
                builder.AppendLine("- Документ, подтверждающий регистрацию ИП");
            }
            if (string.IsNullOrEmpty(entity.get_ConfirmRegDocNum()))
            {
                builder.AppendLine("- Номер документа (регистрация ИП, в карточке юр. лица)");
            }
            if (!entity.get_ConfirmRegDocDate().HasValue)
            {
                builder.AppendLine("- Дата регистрации (ИП, в карточке юр. лица)");
            }
            if (entity.get_HasLicense() && (entity.get_LicenseBlock().Count == 0))
            {
                builder.AppendLine("- Сведения о лицензии");
            }
            if (entity.get_IsGroupParticipant())
            {
                if (string.IsNullOrEmpty(entity.get_GroupItemsName()))
                {
                    builder.AppendLine("- Наименование группы компаний/ИП");
                }
                if (entity.get_GroupIncome() == null)
                {
                    builder.AppendLine("- Какова годовая выручка (группа компаний/ИП)");
                }
                if (entity.get_GroupItemsBlock() == null)
                {
                    builder.AppendLine("- Группа компаний или ИП");
                }
            }
        }
        if (entity.get_ContractorIndividual() != null)
        {
            if (string.IsNullOrEmpty(entity.get_WorkPlace()))
            {
                builder.AppendLine("- Место работы");
            }
            if (string.IsNullOrEmpty(entity.get_WorkPosition()))
            {
                builder.AppendLine("- Должность");
            }
        }
        if (entity.get_IncomeSource().Count == 0)
        {
            builder.AppendLine("- Основные источники дохода");
        }
        if (entity.get_DesiredBankServices().Count == 0)
        {
            builder.AppendLine("- Какие виды банковских услуг хотели получить");
        }
        if (entity.get_DesiredBankServices().Any<IVTBDesiredBankServices>(c => c.get_Code().Equals("Others")) && string.IsNullOrEmpty(entity.get_DesiredBankServicesOthers()))
        {
            builder.AppendLine("- Другие виды услуг");
        }
        if (entity.get_OperationsFrequency() == null)
        {
            builder.AppendLine("- Как часто планируете совершать операции");
        }
        if (string.IsNullOrEmpty(entity.get_OperationsVolume().ToString()))
        {
            builder.AppendLine("- В каком объеме планируете совершать операции");
        }
        if (entity.get_HasForeignBankAccount() && (entity.get_ForeignBankAccountCountry().Count == 0))
        {
            builder.AppendLine("- В какой стране (банковский счет за пределами РК)");
        }
        if (entity.get_HadGovernmentPosition())
        {
            if (entity.get_GovernmentPositions().Count == 0)
            {
                builder.AppendLine("- Укажите какую должность (в госсекторе)");
            }
            if (entity.get_GovernmentPositions().Any<IVTBGovernmentPositions>(c => c.get_Code().Equals("Others")) && string.IsNullOrEmpty(entity.get_GovernmentPositionsOthers()))
            {
                builder.AppendLine("- Укажите какую именно (иная должность в госсекторе)");
            }
        }
        if (entity.get_HasRelativeWithGovPosition() && (entity.get_RelativeWithGovPositionBlock().Count == 0))
        {
            builder.AppendLine("- Родственники в госсекторе");
        }
        if (!entity.get_CompletionDate().HasValue)
        {
            builder.AppendLine("- Дата заполнения");
        }
        if (builder.Length > 0)
        {
            builder.Insert(0, "Необходимо заполнить все обязательные поля! Не заполнено:\n");
        }
        return builder.ToString();
    }

    private void SetBirthDateProperty(IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        DateTimeSettings settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare, DateTime?>(entity, Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_BirthDate)), new ParameterExpression[] { expression }));
        settingsFor.set_MaxDateValue(new DateTime?(DateTime.Now.AddYears(-18)));
        settingsFor.Save();
    }

    private void SetCitizenshipOther(IVTBClientQuestionnare entity)
    {
        entity.set_CitizenshipOther(new HashSet<ICountry>());
        if (entity.get_HasCitizenshipOther())
        {
            entity.get_CitizenshipOther().AddAll(entity.get_Citizenship());
            entity.get_CitizenshipOther().Remove(this.COUNTRY_KAZAKHSTAN);
        }
    }

    private void SetDateUntil(IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        DateTimeSettings settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare, DateTime?>(entity, Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ResidentCardValidUntil)), new ParameterExpression[] { expression }));
        settingsFor.set_MinDateValue(new DateTime?(DateTime.Now.AddDays(1.0)));
        settingsFor.Save();
        settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare, DateTime?>(entity, Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_IdentityDocValidUntil)), new ParameterExpression[] { expression }));
        settingsFor.set_MinDateValue(new DateTime?(DateTime.Now.AddDays(1.0)));
        settingsFor.Save();
    }

    private void SetFilters(IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        EntitySettings settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare, ILegalForm>(entity, Expression.Lambda<Func<IVTBClientQuestionnare, ILegalForm>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_BusActivityType)), new ParameterExpression[] { expression }));
        settingsFor.set_FilterQuery("CODE IN ('57', '58')");
        settingsFor.Save();
    }

    private void SetHasCitizenshipKazakhstan(IVTBClientQuestionnare entity)
    {
        entity.set_HasCitizenshipKazakhstan(entity.get_Citizenship().Contains(this.COUNTRY_KAZAKHSTAN));
    }

    private void SetHasCitizenshipOther(IVTBClientQuestionnare entity)
    {
        entity.set_HasCitizenshipOther((entity.get_Citizenship().Count > 1) || !entity.get_HasCitizenshipKazakhstan());
    }

    private void SetHasResidenceOther(IVTBClientQuestionnare entity)
    {
        entity.set_HasResidenceOther((entity.get_Residence().Count > 1) || !entity.get_Residence().Contains(this.COUNTRY_KAZAKHSTAN));
    }

    private void SetHiddenProperties(IVTBClientQuestionnare entity)
    {
        this.SetHasCitizenshipKazakhstan(entity);
        this.SetHasCitizenshipOther(entity);
        this.SetCitizenshipOther(entity);
        this.SetHasResidenceOther(entity);
    }

    private void SetIssueDate(IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        DateTimeSettings settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare, DateTime?>(entity, Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_IdentityDocIssueDate)), new ParameterExpression[] { expression }));
        settingsFor.set_MaxDateValue(new DateTime?(DateTime.Now));
        settingsFor.Save();
        settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare, DateTime?>(entity, Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ResidentCardIssueDate)), new ParameterExpression[] { expression }));
        settingsFor.set_MaxDateValue(new DateTime?(DateTime.Now));
        settingsFor.Save();
        settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare, DateTime?>(entity, Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ConfirmRegDocDate)), new ParameterExpression[] { expression }));
        settingsFor.set_MaxDateValue(new DateTime?(DateTime.Now));
        settingsFor.Save();
        settingsFor = IEntityExtensions.GetSettingsFor<IVTBClientQuestionnare, DateTime?>(entity, Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_CompletionDate)), new ParameterExpression[] { expression }));
        settingsFor.set_MaxDateValue(new DateTime?(DateTime.Now));
        settingsFor.Save();
    }

    private void SetItemsVisibilityActivityPanel(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = (entity.get_ContractorIndividual() == null) && (entity.get_ContractorLegal() != null);
        this.SetVisibilityIndividualActivity(form, entity);
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_CompanyName)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<ILegalForm>(Expression.Lambda<Func<IVTBClientQuestionnare, ILegalForm>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_BusActivityType)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ConfirmRegDoc)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ConfirmRegDocNum)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<DateTime?>(Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ConfirmRegDocDate)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<long?>(Expression.Lambda<Func<IVTBClientQuestionnare, long?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_Income)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<long?>(Expression.Lambda<Func<IVTBClientQuestionnare, long?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_EmployeesQuantity)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<bool>(Expression.Lambda<Func<IVTBClientQuestionnare, bool>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_HasLicense)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        this.SetVisibilityLicenseBlock(form, entity);
        form.For<bool>(Expression.Lambda<Func<IVTBClientQuestionnare, bool>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_IsGroupParticipant)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        this.SetVisibilityGroupItems(form, entity);
    }

    private void SetItemsVisibilityBankSector(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        this.SetVisibilityDesiredBankServicesOthers(form, entity);
        this.SetVisibilityForeignAccountCountry(form, entity);
        this.SetVisibilityGovPosition(form, entity);
        this.SetVisibilityGovPositionOthers(form, entity);
        this.SetVisibilityRelativesWithGovPositions(form, entity);
        this.SetVisibilityForeignerInfo(form, entity);
        this.SetVisibilityForeignStructureInfo(form, entity);
    }

    private void SetItemsVisibilityPersonalInformation(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_IsAddressSame();
        form.For<IAddress>(Expression.Lambda<Func<IVTBClientQuestionnare, IAddress>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_FactAddress)), new ParameterExpression[] { expression })).Visible(!flag).Required(!flag);
        this.SetBirthDateProperty(entity);
    }

    private void SetVisibilityContractors(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        form.For<IContractorIndividual>(Expression.Lambda<Func<IVTBClientQuestionnare, IContractorIndividual>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ContractorIndividual)), new ParameterExpression[] { expression })).ReadOnly(true).Visible(entity.get_ContractorIndividual() != null);
        form.For<IContractorLegal>(Expression.Lambda<Func<IVTBClientQuestionnare, IContractorLegal>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ContractorLegal)), new ParameterExpression[] { expression })).ReadOnly(true).Visible(entity.get_ContractorLegal() != null);
    }

    private void SetVisibilityDesiredBankServicesOthers(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_DesiredBankServices().Any<IVTBDesiredBankServices>(c => c.get_Code().Equals("Others"));
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_DesiredBankServicesOthers)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityForeignAccountCountry(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_HasForeignBankAccount();
        form.For<ISet<ICountry>>(Expression.Lambda<Func<IVTBClientQuestionnare, ISet<ICountry>>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ForeignBankAccountCountry)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityForeignerInfo(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_ConductOnBehalfForeigner();
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "f"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ForeignerInfo)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityForeignStructureInfo(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_IsForeignStructureProtector();
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "f"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ForeignStructureInfo)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityGovPosition(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_HadGovernmentPosition();
        form.For<ISet<IVTBGovernmentPositions>>(Expression.Lambda<Func<IVTBClientQuestionnare, ISet<IVTBGovernmentPositions>>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_GovernmentPositions)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityGovPositionOthers(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_GovernmentPositions().Any<IVTBGovernmentPositions>(c => c.get_Code().Equals("Others"));
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_GovernmentPositionsOthers)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityGroupItems(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_IsGroupParticipant() && (entity.get_ContractorLegal() != null);
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_GroupItemsName)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<DropDownItem>(Expression.Lambda<Func<IVTBClientQuestionnare, DropDownItem>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_GroupIncome)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<ISet<IVTBClientQuestionnare_GroupItemsBlock>>(Expression.Lambda<Func<IVTBClientQuestionnare, ISet<IVTBClientQuestionnare_GroupItemsBlock>>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_GroupItemsBlock)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityIndividualActivity(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_ContractorIndividual() != null;
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_WorkPlace)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_WorkPosition)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityLicenseBlock(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_HasLicense() && (entity.get_ContractorLegal() != null);
        form.For<ISet<IVTBClientQuestionnare_LicenseBlock>>(Expression.Lambda<Func<IVTBClientQuestionnare, ISet<IVTBClientQuestionnare_LicenseBlock>>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_LicenseBlock)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityQuestionnareFile(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity, bool status)
    {
        ParameterExpression expression;
        form.For<IAttachment>(Expression.Lambda<Func<IVTBClientQuestionnare, IAttachment>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_QuestionnareFile)), new ParameterExpression[] { expression })).Visible(status);
    }

    private void SetVisibilityRelativePositionOthers(IVTBClientQuestionnare_RelativeWithGovPositionBlock item, FormViewBuilder<IVTBClientQuestionnare_RelativeWithGovPositionBlock> form)
    {
        ParameterExpression expression;
        bool flag = ((item.get_RelativePosition() != null) && item.get_RelativePosition().get_Code().Equals("Others")) || !string.IsNullOrEmpty(item.get_RelativePositionOthers());
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare_RelativeWithGovPositionBlock, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare_RelativeWithGovPositionBlock), "i"), (MethodInfo) methodof(IVTBClientQuestionnare_RelativeWithGovPositionBlock.get_RelativePositionOthers)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityRelativesWithGovPositions(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_HasRelativeWithGovPosition();
        form.For<ISet<IVTBClientQuestionnare_RelativeWithGovPositionBlock>>(Expression.Lambda<Func<IVTBClientQuestionnare, ISet<IVTBClientQuestionnare_RelativeWithGovPositionBlock>>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_RelativeWithGovPositionBlock)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
        form.For<bool>(Expression.Lambda<Func<IVTBClientQuestionnare, bool>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_HasIntentionConductOnBehalfGovRelatives)), new ParameterExpression[] { expression })).Visible(flag).Required(flag);
    }

    private void SetVisibilityResidentCardFields(FormViewBuilder<IVTBClientQuestionnare> form, IVTBClientQuestionnare entity)
    {
        ParameterExpression expression;
        bool flag = entity.get_ResidentCard() != null;
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ResidentCardSeries)), new ParameterExpression[] { expression })).Visible(true);
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ResidentCardNumber)), new ParameterExpression[] { expression })).Visible(true).Required(flag);
        form.For<string>(Expression.Lambda<Func<IVTBClientQuestionnare, string>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ResidentCardIssuedBy)), new ParameterExpression[] { expression })).Visible(true).Required(flag);
        form.For<DateTime?>(Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ResidentCardIssueDate)), new ParameterExpression[] { expression })).Visible(true).Required(flag);
        form.For<DateTime?>(Expression.Lambda<Func<IVTBClientQuestionnare, DateTime?>>(Expression.Property(expression = Expression.Parameter(typeof(IVTBClientQuestionnare), "c"), (MethodInfo) methodof(IVTBClientQuestionnare.get_ResidentCardValidUntil)), new ParameterExpression[] { expression })).Visible(true).Required(flag);
    }

    private void SetWarningQFileSignedAttachValue(IVTBClientQuestionnare entity)
    {
        entity.set_WarningAttachQFileSigned((entity.get_QuestionnareFileSigned() == null) ? "Необходимо вложить подписанную клиентом анкету!" : string.Empty);
    }

    private void UpdateClientQuestionnareDoc(IVTBClientQuestionnare entity, string clientTypeString, IFile doc)
    {
        BinaryFile file = this.GenerateClientQuestionnareFile(entity, clientTypeString);
        IDocumentVersion version = InterfaceActivator.Create<IDocumentVersion>();
        version.set_Document(doc);
        version.set_File(file);
        version.set_Status(2);
        doc.get_Versions().Add(version);
        IUser user = EntityManager<IOrganizationItem>.get_Instance().Find("Name LIKE '%Системный пользователь%'").First<IOrganizationItem>().get_User();
        doc.set_CreationAuthor(user);
        doc.Save();
    }

    private void UpdateEntityInformation(IVTBClientQuestionnare entity)
    {
        IContractorIndividualConfigExt contractorIndividual = EntityManager<IContractorIndividualConfigExt>.get_Instance().Find($"INN = '{entity.get_IIN()}'").FirstOrDefault<IContractorIndividualConfigExt>();
        if (contractorIndividual != null)
        {
            entity.set_LastName(contractorIndividual.get_SecondName());
            entity.set_FirstName(contractorIndividual.get_FirstName());
            entity.set_MiddleName(contractorIndividual.get_MiddleName());
            if (!((contractorIndividual.get_VTBNationality() == null) || entity.get_Citizenship().Contains(contractorIndividual.get_VTBNationality())))
            {
                entity.get_Citizenship().Add(contractorIndividual.get_VTBNationality());
            }
            entity.set_IdentityDoc(contractorIndividual.get_DocumentType());
            entity.set_IdentityDocSeries(contractorIndividual.get_DocumentSeries());
            entity.set_IdentityDocNumber(contractorIndividual.get_DocumentNumber());
            entity.set_IdentityDocIssuedBy(contractorIndividual.get_DocumentIssued());
            entity.set_IdentityDocIssueDate(new DateTime?(contractorIndividual.get_DocumentIssueDate()));
            entity.set_IdentityDocValidUntil(contractorIndividual.get_DocumentEndDate());
            entity.set_ResidentCardNumber(contractorIndividual.get_VTBResidenceDocNumber());
            entity.set_ResidentCardIssuedBy(contractorIndividual.get_VTBResidenceIssued());
            entity.set_ResidentCardIssueDate(contractorIndividual.get_VTBResidenceIssueDate());
            entity.set_ResidentCardValidUntil(contractorIndividual.get_VTBResidencePermitDate());
            entity.set_ContactDataCellPhone(contractorIndividual.get_VTBMobilePhone());
            entity.set_ContactDataEmail((contractorIndividual.get_Email().Count > 0) ? contractorIndividual.get_Email().First<IEmail>().ToString() : string.Empty);
        }
        if (entity.get_ContractorLegal() != null)
        {
            IContractorLegalConfigExt contractorLegal = EntityManager<IContractorLegalConfigExt>.get_Instance().Find($"INN = '{entity.get_IIN()}'").First<IContractorLegalConfigExt>();
            this.UpdateSpecialInfoForLegal(entity, contractorLegal);
        }
        else
        {
            this.UpdateSpecialInfoForIndividual(entity, contractorIndividual);
        }
        entity.set_Sale((entity.get_Sale() == null) ? this.GetSaleFrom(entity.get_QuestionnareName()) : entity.get_Sale());
        entity.set_CompletionDate(new DateTime?(DateTime.Now));
    }

    private void UpdateSpecialInfoForIndividual(IVTBClientQuestionnare entity, IContractorIndividualConfigExt contractorIndividual)
    {
        entity.set_LegalAddress(contractorIndividual.get_LegalAddress());
        entity.set_FactAddress(contractorIndividual.get_PostalAddress());
        if ((entity.get_LegalAddress() != null) && (entity.get_FactAddress() != null))
        {
            entity.set_IsAddressSame(entity.get_LegalAddress().get_Name().Equals(entity.get_FactAddress().get_Name()));
            entity.set_ContactDataAddress(entity.get_IsAddressSame() ? entity.get_LegalAddress().get_Name() : entity.get_FactAddress().get_Name());
        }
        entity.set_ContactDataCellPhone(contractorIndividual.get_VTBMobilePhone());
        entity.set_ContactDataEmail((contractorIndividual.get_Email().Count > 0) ? contractorIndividual.get_Email().First<IEmail>().ToString() : entity.get_ContactDataEmail());
        if (!string.IsNullOrEmpty(contractorIndividual.get_VTBPosition()))
        {
            entity.set_WorkPosition(contractorIndividual.get_VTBPosition());
        }
        if (!string.IsNullOrEmpty(contractorIndividual.get_VTBWorkPlace()))
        {
            entity.set_WorkPlace(contractorIndividual.get_VTBWorkPlace());
        }
    }

    private void UpdateSpecialInfoForLegal(IVTBClientQuestionnare entity, IContractorLegalConfigExt contractorLegal)
    {
        entity.set_CompanyName(contractorLegal.get_Name());
        entity.set_BusActivityType(contractorLegal.get_LegalForm());
        entity.set_ConfirmRegDocNum(contractorLegal.get_BASRegistrationNumber());
        entity.set_ConfirmRegDocDate(contractorLegal.get_BASRegistrationDate());
        entity.set_LegalAddress(contractorLegal.get_LegalAddress());
        entity.set_FactAddress(contractorLegal.get_PostalAddress());
        if ((entity.get_LegalAddress() != null) && (entity.get_FactAddress() != null))
        {
            entity.set_IsAddressSame(entity.get_LegalAddress().get_Name().Equals(entity.get_FactAddress().get_Name()));
            entity.set_ContactDataAddress(entity.get_IsAddressSame() ? entity.get_LegalAddress().get_Name() : entity.get_FactAddress().get_Name());
        }
        entity.set_ContactDataCellPhone(string.IsNullOrEmpty(entity.get_ContactDataCellPhone()) ? contractorLegal.get_BASContactMobilePhone() : entity.get_ContactDataCellPhone());
        entity.set_ContactDataEmail((contractorLegal.get_Email().Count > 0) ? contractorLegal.get_Email().First<IEmail>().ToString() : entity.get_ContactDataEmail());
    }
}

